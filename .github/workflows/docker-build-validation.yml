name: Docker Build Validation

on:
  pull_request:
    branches: [ main, staging ]
    paths:
      - 'Dockerfile'
      - 'package*.json'
      - 'src/**'
      - 'docs/**'
      - 'static/**'
      - 'docusaurus.config.ts'
      - 'tsconfig.json'
      - 'sidebars.ts'
      - '.github/workflows/docker-build-validation.yml'

jobs:
  docker-build-validation:
    runs-on: ubuntu-latest
    name: Docker Build and Validation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: arcade-docs:test
          build-args: |
            LANDING_PAGE_URL=https://example.com
            ADMIN_PAGE_URL=https://admin.example.com
            APP_PAGE_URL=https://app.example.com
            UNITY_DOCS_URL=https://docs.example.com
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test Docker container
        run: |
          # Start container in background
          CONTAINER_ID=$(docker run -d -p 8080:8080 \
            -e LANDING_PAGE_URL=https://example.com \
            -e ADMIN_PAGE_URL=https://admin.example.com \
            -e APP_PAGE_URL=https://app.example.com \
            -e UNITY_DOCS_URL=https://docs.example.com \
            arcade-docs:test)
          
          echo "Container ID: $CONTAINER_ID"
          
          # Wait for container to start
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep -q "$CONTAINER_ID"; then
            echo "❌ Container failed to start"
            docker logs "$CONTAINER_ID"
            exit 1
          fi
          
          # Test HTTP endpoint
          MAX_RETRIES=30
          RETRY_INTERVAL=2
          
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -f http://localhost:8080; then
              echo "✅ Application is responding correctly"
              break
            elif [ $i -eq $MAX_RETRIES ]; then
              echo "❌ Application failed to respond after $MAX_RETRIES retries"
              docker logs "$CONTAINER_ID"
              exit 1
            else
              echo "Attempt $i/$MAX_RETRIES failed, retrying in ${RETRY_INTERVAL}s..."
              sleep $RETRY_INTERVAL
            fi
          done
          
          echo "✅ Docker build and validation successful!"
          
          # Clean up
          docker stop "$CONTAINER_ID"
          docker rm "$CONTAINER_ID" 